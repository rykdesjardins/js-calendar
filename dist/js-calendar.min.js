"use strict"; Object.defineProperty(exports, "__esModule", { value: !0 }); var _createClass = function () { function a(c, f) { for (var n, l = 0; l < f.length; l++)n = f[l], n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(c, n.key, n) } return function (c, f, l) { return f && a(c.prototype, f), l && a(c, l), c } }(); function _defineProperty(a, c, f) { return c in a ? Object.defineProperty(a, c, { value: f, enumerable: !0, configurable: !0, writable: !0 }) : a[c] = f, a } function _toConsumableArray(a) { if (Array.isArray(a)) { for (var c = 0, f = Array(a.length); c < a.length; c++)f[c] = a[c]; return f } return Array.from(a) } function _classCallCheck(a, c) { if (!(a instanceof c)) throw new TypeError("Cannot call a class as a function") } var _jscallog = function (c) { console.log("[JSCalendar - " + new Date().toLocaleTimeString() + "] " + c) }, _jsCalWrapper = { instances: {} }, _a = function (c, f, l) { var n = document.createElement(c); return n.className = f || "", l && l.appendChild(n), n }, JSCalendarEvent = function () { function a(c, f, l) { return _classCallCheck(this, a), !!c && void (this.setData(c), this.setID(c.id), this.position = l, this.options = f.options, this.calendar = f, this.buildElements(), this.updateElements(), this.bindEvents()) } return _createClass(a, [{ key: "setID", value: function (f) { this.id = f } }, { key: "getID", value: function () { return this.id } }, { key: "setData", value: function (f) { this.at = f.at && new Date(f.at), this.duration = f.duration, this.displayname = f.displayname, this.color = f.color, this.html = f.html } }, { key: "formatDuration", value: function (f) { var l = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "", n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : ""; if (!f) return ""; f = Math.floor(f / 1e3 / 60); var o = Math.floor(f / 60), p = f % 60; return l + (o ? o + "h " : "") + (p ? p + "mins" : "") + n } }, { key: "formatTime", value: function (f) { var l = f.getHours(), n = f.getMinutes(), o = f.getSeconds(), p = ""; return this.options.ampm && (11 < l ? (l -= 12 == l ? 0 : 12, p = " PM") : p = " AM"), l + (10 > n ? ":0" : ":") + n + (this.displaySeconds ? (10 > o ? ":0" : ":") + o : "") + p } }, { key: "buildElements", value: function () { this.monthElem = _a("div", "cell-event-mark"), this.weekElem = _a("div", "cal-week-day-event-col"), this.dayElem = _a("div", "cal-total-day-event-view") } }, { key: "updateElements", value: function () { var f = this.monthElem, l = this.weekElem, n = this.dayElem; if (this.at) { var o = this.formatTime(new Date(this.at)); f.textContent = o, f.dataset.at = this.at } if (this.displayname) { var p = this.displayname.substring(0, this.options.titleCropSize); f.textContent += (this.at ? " - " : "") + p + (p.length == this.displayname ? "" : "...") } if (f.style.background = this.color || this.options.eventBackground, this.displayname ? (l.classList.add("text-injected"), l.textContent = this.displayname) : this.html ? (l.innerHTML = this.html, l.classList.add("html-injected")) : (l.classList.add("not-injected"), l.textContent = this.options.nonameEventVocab), l.style.background = this.color || this.options.eventBackground, this.at || l.classList.add("no-starting-time"), this.duration || l.classList.add("no-duration"), this.at) { var q; if (q = this.formatTime(this.at), this.duration) { var r = new Date(this.at.getTime() + this.duration); q += " - " + this.formatTime(r) } var u = l.querySelector(".cal-week-day-time-float") || _a("span", "cal-week-day-time-float", l); u.textContent = q } var x = this.options.dayviewGapMinutes; this.gapcell = -1, this.at ? this.gapcell = this.at.getHours() * (60 / x) + this.at.getMinutes() / x : n.classList.add("no-time"), this.gapcount = this.options.dayviewNoTimeGapSize, this.duration ? this.gapcount = Math.ceil(this.duration / 1e3 / 60 / x) : n.classList.add("no-duration"), n.style.background = this.color || this.options.eventBackground, n.style.height = this.gapcount * this.options.dayviewGapHeight - 2 + "px", this.at && (this.daytop = this.gapcell * this.options.dayviewGapHeight, n.style.top = this.daytop + "px", n.style.right = "0px", n.style.left = "0px", n.style.zIndex = Math.floor(this.gapcell)); var A = n.querySelector(".cal-total-day-displayname") || _a("div", "cal-total-day-displayname", n); if (A.textContent = this.displayname || this.options.nonameEventVocab, this.at) { var B = n.querySelector(".cal-total-day-time") || _a("div", "cal-total-day-time", n); B.textContent = this.formatTime(new Date(this.at)) + this.formatDuration(this.duration, ", ") } } }, { key: "getDayGap", value: function () { return this.gapcell } }, { key: "dragging", value: function () { this.monthElem.classList.add("dragged"), this.weekElem.classList.add("dragged"), this.dayElem.classList.add("dragged"), this.calendar.dragging(this) } }, { key: "dropped", value: function () { this.monthElem.classList.remove("dragged"), this.weekElem.classList.remove("dragged"), this.dayElem.classList.remove("dragged"), this.calendar.dropped(this) } }, { key: "bindEvents", value: function () { var f = this; this.monthElem.addEventListener("mousedown", function () { window.addEventListener("mouseup", function n() { window.removeEventListener("mouseup", n), f.dropped() }), f.dragging() }), this.weekElem.addEventListener("mousedown", function () { window.addEventListener("mouseup", function n() { window.removeEventListener("mouseup", n), f.dropped() }), f.dragging() }), this.dayElem.addEventListener("mousedown", function (l) { window.addEventListener("mouseup", function o() { window.removeEventListener("mouseup", o), f.dropped() }), f.originalY = l.y, f.potentialnewtop = f.daytop, f.dragging() }), this.monthElem.addEventListener("click", function () { f.calendar.fire("click", f) }), this.weekElem.addEventListener("click", function () { f.calendar.fire("click", f) }) } }, { key: "render", value: function (f, l) { l.appendChild(this[f + "Elem"]) } }, { key: "destroy", value: function () { this.monthElem && this.monthElem.remove(), this.weekElem && this.weekElem.remove(), this.dayElem && this.dayElem.remove(), this.monthElem = void 0, this.weekElem = void 0, this.dayElem = void 0 } }]), a }(), JSCalendar = function () { function a(c, f) { if (_classCallCheck(this, a), this.elem = c, this.id = c.id, this.options = Object.assign(a.defaultOptions, f || { defaultOptions: !0 }), this.state = a.createState(), this.hooks = {}, Math.floor(60 / this.options.dayviewGapMinutes) != 60 / this.options.dayviewGapMinutes) throw new Error("Option dayviewGapMinutes must be a divisor of 60"); this.fire("new") } return _createClass(a, [{ key: "init", value: function (f) { return _jscallog("Created new instance with id : " + this.id), this.fire("init"), this.createStructure(), this.options.datasource ? this.fetch(f) : this.render() } }, { key: "createStructure", value: function () { var f = this; a.emptyElem(this.elem), this.elem.classList.add("js-calendar"), this.controlbar = _a("div", "control-bar", this.elem), this.tablewrapper = _a("div", "calendar-wrapper", this.elem), this.table = _a("table", "calendar-table", this.tablewrapper), this.viewcontroller = _a("div", "control-bar-widget control-bar-views", this.controlbar), this.actioncontroller = _a("div", "control-bar-widget control-bar-actions", this.controlbar), this.titlecontroller = _a("div", "control-bar-widget control-bar-title", this.controlbar), this.options.views.forEach(function (l) { var n = f.options.viewsVocab[l] || l, o = _a("button", "control-button change-view change-view-" + l, f.viewcontroller); o.addEventListener("click", function () { f.setView(l) }), o.textContent = n }), this.options.buttons.forEach(function (l) { var n = f.options.buttonsVocab[l] || l, o = _a("button", "control-button calendar-action calendar-action-" + l, f.actioncontroller), p = f.options.buttonsActions[l]; o.addEventListener("click", function () { "function" == typeof p ? p(f) : f[p]() }), o.textContent = n }) } }, { key: "goNow", value: function () { var f = new Date; return this.state.year = f.getFullYear(), this.state.month = f.getMonth(), this.state.day = f.getDate(), this.state.weekday = f.getDay(), this.adjustDateToView(), this.render() } }, { key: "goBack", value: function () { if ("day" == this.state.view) { if (this.state.day-- , 0 == this.state.day) { this.state.month-- , 0 == this.state.month && (this.state.month = 11, this.state.year--); var f = a.getDaysInMonth(this.state.year, this.state.month); this.state.day = f.numberOfDays } } else if ("month" == this.state.view) this.state.month-- , 0 > this.state.month && (this.state.month = 11, this.state.year--); else if ("week" == this.state.view && (this.state.day -= 7, this.state.day -= this.state.day % 7, 0 >= this.state.day)) { this.state.month-- , -1 == this.state.month && (this.state.month = 11, this.state.year--); var l = a.getDaysInMonth(this.state.year, this.state.month); this.state.day = l.numberOfDays + this.state.day } return this.render() } }, { key: "goNext", value: function () { if ("day" == this.state.view) { var f = a.getDaysInMonth(this.state.year, this.state.month); this.state.day++ , this.state.day > f.numberOfDays && (this.state.day = 1, this.state.month++ , 11 < this.state.month && (this.state.month = 0, this.state.year++)) } else if ("month" == this.state.view) this.state.month++ , 11 < this.state.month && (this.state.month = 0, this.state.year++); else if ("week" == this.state.view) { var l = a.getDaysInMonth(this.state.year, this.state.month); this.state.day += 7, this.state.day > l.numberOfDays && (this.state.month++ , 12 == this.state.month && (this.state.month = 0, this.state.year++), this.state.day -= l.numberOfDays) } return this.render() } }, { key: "goToDay", value: function (f) { var l = f.split("-"); l = new Date(l[0], l[1], l[2]), this.state.year = l.getFullYear(), this.state.month = l.getMonth(), this.state.day = l.getDate(), this.setView("day") } }, { key: "push", value: function (f) { if (this.fire("willPush", f), f.at) { var l = new Date(f.at); this.validateCell(l.getFullYear(), l.getMonth(), l.getDate()), this.state.matrix[l.getFullYear()][l.getMonth()][l.getDate()].push(new JSCalendarEvent(f.event, this, l.getFullYear() + "-" + l.getMonth() + "-" + l.getDate())), this.fire("pushed", f) } else this.fire("didNotPush", f); return this } }, { key: "on", value: function (f, l) { return this.hooks[f] = this.hooks[f] || [], this.hooks[f].push(l), this } }, { key: "fire", value: function (f, l) { var n = this; _jscallog("Firing event '" + f + "'"), a.fire(f, this, l); var o = this.hooks[f] || []; return o.forEach(function (p) { p(n, l) }), this } }, { key: "destroy", value: function () { for (var f in this.state.matrix) for (var l in this.state.matrix[f]) for (var n in this.state.matrix[f][l]) for (var o = 0; o < this.state.matrix[f][l][n].length; o++)this.state.matrix[f][l][n][o].destroy(); return delete this.elem, delete this.tablewrapper, delete this.controlbar, delete this.table, delete _jsCalWrapper[this.id], this } }, { key: "adjustDateToView", value: function () { "week" == this.state.view && this.state.weekday != this.state.day && 8 > this.state.day && (this.state.month-- , this.state.day = a.getDaysInMonth(this.state.year, this.state.month).numberOfDays) } }, { key: "getDateAppendee", value: function () { var f = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : this.state.day; return 3 < f && 21 > f ? this.options.nthVocab.default : this.options.nthVocab[f.toString().slice(-1)] || this.options.nthVocab.default } }, { key: "setView", value: function (f) { return this.fire("viewWillChange"), this.state.view != f && (this.state.view = f, this.adjustDateToView(), this.render(), this.fire("viewChanged")), this } }, { key: "render", value: function () { var f = this; this.fire("willRender"), _jscallog("Rendering instance " + this.id); var l = Date.now(); return this.fetch(function () { switch (a.emptyElem(f.table), f.state.view) { case "day": f.renderDay(); break; case "week": f.renderWeek(); break; case "month": default: f.renderMonth(); }f.applyCSS(), f.updateControls(), f.fire("rendered"), _jscallog("Rendering benchmark : " + (Date.now() - l) + "ms") }, this.options.alwaysFetch), this } }, { key: "renderDay", value: function () { var f = this; this.titlecontroller.textContent = this.options.monthsVocab[this.state.month] + " " + this.state.day + this.getDateAppendee() + ", " + this.state.year; var l = _a("tr", "cal-week-day-row", this.table), n = _a("td", "cal-week-day-col", l); this.validateCell(); var o = this.state.matrix[this.state.year][this.state.month][this.state.day], p = _a("div", "single-day-no-time-wrap", n), q = _a("div", "single-day-time-table", n), r = _a("div", "cal-total-day-event-wrap", q); o.filter(function (L) { return !L.at }).forEach(function (L) { L.render(f.state.view, p) }), r.addEventListener("mousemove", function (L) { if (f.state.dragging) { var M = f.state.dragged.daytop - (f.state.dragged.originalY - L.y); f.state.dragged.dayElem.style.top = M + "px", f.state.dragged.potentialnewtop = M } }); for (var u = this.options.dayviewGapMinutes, x = Math.ceil(60 / u), z = 0, A = 0; 24 > A; A++)for (var B = 0; B < x; B++) { var C = _a("div", "hour-block gap-" + ++z, q), D = _a("span", "minutes-block-time", C); C.classList.add(0 == B ? "hour-gap" : "minutes-gap"); var E = B * u, F = A, G = ""; C.style.height = this.options.dayviewGapHeight - 1 + "px", this.options.ampm && (12 > A ? G = "AM" : (F -= 12 == F ? 0 : 12, G = "PM")), D.textContent = F + ":" + (10 > E ? "0" : "") + E + G, C.dataset.gapindex = z } var H = {}, I = -1; o.filter(function (L) { return L.at }).forEach(function (L) { L.render(f.state.view, r), L.ratio = 100, L.dayElem.style.left = "0", L.dayElem.style.right = "0"; var M = L.gapcount; Math.floor(L.gapcell) != L.gapcell && M++; for (var O, N = 0; N < M; N++)O = Math.floor(L.gapcell + N), H[O] || (H[O] = []), H[O].push(L); (-1 == I || I > L.gapcell) && (I = L.gapcell) }); var J = function (M) { var N = H[M].length, O = 100 / N, P = 0; H[M].forEach(function (Q) { var R = P * O, S = O * (N - P - 1); O < Q.ratio && (Q.ratio = O, Q.dayElem.style.left = R + "%", Q.dayElem.style.right = S + "%"), P++ }) }; for (var K in H) J(K); this.state.skipscroll ? this.state.skipscroll = !1 : this.tablewrapper.scrollTop = I * this.options.dayviewGapHeight } }, { key: "renderWeek", value: function () { var f = this, l = 86400000, n = _a("tr", "cal-week-day-row", this.table), o = _a("td", "cal-week-day-col", n), p = a.getDaysInMonth(this.state.year, this.state.month), q = new Date(this.state.year, this.state.month, this.state.day), r = new Date(q.getTime() - q.getDay() * l), u = new Date(r.getTime() + 6 * l); this.validateCell(r.getFullYear(), r.getMonth(), r.getDate()), this.validateCell(u.getFullYear(), u.getMonth(), u.getDate()), _jscallog("Rending matrix week"); for (var x = new Date(r.getTime()), z = function () { var F = x.getFullYear(), G = x.getMonth(), H = x.getDate(), I = x.getDay(), J = x.getTime(), K = _a("div", "cal-week-day-sep", o); K.textContent = f.options.daysVocab[I] + ", " + f.options.monthsVocab[G] + " " + H; var L = _a("div", "col-week-day-container", o); if (f.state.matrix[F][G][H]) for (var O, M = f.state.matrix[F][G][H], N = 0; N < M.length; N++)O = M[N], O.render(f.state.view, L); var P = F + "-" + G + "-" + H; L.dataset.fulldate = P, L.dataset.at = x.getTime(), L.addEventListener("mouseenter", function () { f.state.dragging && (L.appendChild(f.state.dragged.weekElem), f.state.newPosition = P, f.state.newAt = x.getTime()) }), K.addEventListener("click", function () { f.goToDay(P) }); var Q = _a("div", "cal-week-day-no-event-col", L); Q.textContent = f.options.emptyDayVocab, x = new Date(J + l) }, A = 0; 7 > A; A++)z(A); var B = this.getDateAppendee(r.getDate()), C = this.getDateAppendee(u.getDate()); this.titlecontroller.textContent = r.getMonth() == u.getMonth() ? this.options.monthsVocab[r.getMonth()] + " " + r.getDate() + B + " - " + u.getDate() + C + ", " + this.state.year : r.getYear() == u.getYear() ? this.options.monthsVocab[r.getMonth()] + " " + r.getDate() + B + " - " + this.options.monthsVocab[u.getMonth()] + " " + u.getDate() + C + ", " + this.state.year : this.options.monthsVocab[r.getMonth()] + " " + r.getDate() + B + ", " + r.getFullYear() + " - " + this.options.monthsVocab[u.getMonth()] + " " + u.getDate() + C + ", " + u.getFullYear() } }, { key: "renderMonth", value: function () { for (var z, f = this, l = a.getDaysInMonth(this.state.year, this.state.month), n = -l.firstDay, o = l.numberOfDays, p = new Date, q = p.getMonth() == this.state.month && p.getFullYear() == this.state.year, r = p.getDate(), u = _a("tr", "jscal-weekday-row", this.table), x = 0; x < this.options.daysVocab.length; x++)z = _a("td", "js-cal-weekday", u), z.textContent = this.options.daysVocab[x]; for (var A = 0; 6 > A; A++)for (var B = _a("tr", "jscal-row row" + A, this.table), C = function (F) { var G = new Date(f.state.year, f.state.month, ++n), H = _a("td", "jscal-col row" + A + "col" + F, B), J = _a("span", "cell-number", H); if (0 >= n || n > o) { H.classList.add("notinmonth"), J.textContent = G.getDate() } else J.classList.add("not-in-month"), J.textContent = G.getDate(); q && r == n && H.classList.add("cell-today"), B.appendChild(H), f.validateCell(G.getFullYear(), G.getMonth(), G.getDate()); var L = f.state.matrix[G.getFullYear()][G.getMonth()][G.getDate()]; if (L) for (var M = 0; M < L.length; M++)L[M].render(f.state.view, H); var N = G.getFullYear() + "-" + G.getMonth() + "-" + G.getDate(); H.dataset.at = G.getTime(), H.dataset.fulldate = N, H.addEventListener("mouseenter", function () { f.state.dragging && (H.appendChild(f.state.dragged.monthElem), f.state.newPosition = H.dataset.fulldate, f.state.newAt = H.dataset.at) }), J.addEventListener("click", function () { f.goToDay(N) }) }, D = 0; 7 > D; D++)C(D); this.titlecontroller.textContent = this.options.monthsVocab[this.state.month] + " " + this.state.year } }, { key: "updateControls", value: function () { var f = this.controlbar.querySelector(".active"); f && f.classList.remove("active"); var l = this.controlbar.querySelector(".change-view-" + this.state.view); l && l.classList.add("active") } }, { key: "applyCSS", value: function () { "full" == this.options.width ? (this.elem.style.width = "auto", this.state.responsiveWidth = this.elem.getBoundingClientRect().width) : this.elem.style.width = this.options.width + "px"; for (var f = this.elem.querySelectorAll(".jscal-col"), l = 0; l < f.length; l++)f[l].style.height = this.options.height / 6 + "px", f[l].style.width = (this.state.responsiveWidth || this.options.width) / 7 + "px"; this.elem.querySelector(".calendar-wrapper").style.maxHeight = this.options.height + 40 + "px" } }, { key: "setDate", value: function (f, l, n, o) { this.state.year = f, this.state.month = l, this.state.day = n, this.state.weekday = new Date(f, l, n).getDay(), o && this.render() } }, { key: "validateCell", value: function () { var f = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : this.state.year, l = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : this.state.month, n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : this.state.day; this.state.matrix[f] || (this.state.matrix[f] = { 0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {} }), this.state.matrix[f][l] || (this.state.matrix[f][l] = {}), this.state.matrix[f][l][n] || (this.state.matrix[f][l][n] = []) } }, { key: "moveCell", value: function (f) { var l = f.position, n = this.state.newPosition; if (!f) return this.fire("cellDidNotMove", { event: f, reason: new Error("moveCell was fired without an event") }); if (this.fire("cellMightMove", f), "day" == this.state.view) { if (!f.potentialnewtop || f.potentialnewtop == f.daytop) return this.fire("click", f); var o = f.potentialnewtop; o -= o % this.options.dayviewGapHeight; var p = o / this.options.dayviewGapHeight; if (p != f.gapcell) { f.gapcell = p, f.dayElem.style.top = o + "px", f.daytop = o; var q = p * this.options.dayviewGapMinutes, r = f.at; f.at = new Date(this.state.year, this.state.month, this.state.day, 0, q), f.updateElements(), this.fire("cellMoved", { event: f, oldtime: r, newtime: f.at }), this.state.skipscroll = !0, this.render() } else f.dayElem.style.top = o + "px", this.fire("cellDidNotMove", { event: f, reason: new Error("Distance between click and drop not big enough") }) } else if (n && n != l) { this.fire("cellWillMove", { event: f, oldPosition: l, newPosition: n }); var u = l.split("-"), x = n.split("-"), z = this.state.matrix[u[0]][u[1]][u[2]], A = z ? z.indexOf(f) : -1, B = new Date(f.at); if (B.setDate(x[2]), B.setMonth(x[1]), B.setFullYear(x[0]), f.at = B, -1 != A) { z.splice(A, 1), this.validateCell(x[0], x[1], x[2]); var C = this.state.matrix[x[0]][x[1]][x[2]]; C = C || [], this.state.matrix[x[0]][x[1]][x[2]] = C, C.push(f), f.position = n, this.fire("cellMoved", { event: f, oldPosition: l, newPosition: n, newtime: f.at }) } else this.fire("cellDidNotMove", { event: f, reason: new Error("Could not find cell in matrix") }) } else this.fire("cellDidNotMove", { event: f, reason: new Error("Position did not change") }) } }, { key: "dragging", value: function (f) { this.fire("dragging", f), this.state.dragging = !0, this.state.dragged = f, this.state.newPosition = void 0, this.elem.classList.add("dragging") } }, { key: "dropped", value: function (f) { this.fire("dropped", f), this.moveCell(f), this.state.dragging = !1, this.state.dragged = void 0, this.elem.classList.remove("dragging") } }, { key: "appendMatrix", value: function (f, l) { var n = this; this.fire("matrixWillAppend"); var o = this.state.matrix, p = function (u) { o[u] || (o[u] = { 0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {} }); var x = f[u], z = function (C) { var D = f[u][C], E = function (H) { var I; o[u][C][H] || (o[u][C][H] = []), (I = o[u][C][H]).push.apply(I, _toConsumableArray(f[u][C][H].map(function (J) { return new JSCalendarEvent(J, n, u + "-" + C + "-" + H) }))) }; for (var F in D) E(F) }; for (var A in x) z(A) }; for (var q in f) p(q); return this.fire("matrixAppended"), l && this.render(), this } }, { key: "setMatrix", value: function (f, l) { for (var n in _jscallog("Setting new matrix to instance " + this.id), this.fire("matrixWillSet"), f || (f = a.defaultMatrix()), this.state.matrix = f, this.state.matrix) for (var o in this.state.matrix[n]) for (var p in this.state.matrix[n][o]) for (var q = 0; q < this.state.matrix[n][o][p].length; q++)this.state.matrix[n][o][p][q] = new JSCalendarEvent(this.state.matrix[n][o][p][q], this, n + "-" + o + "-" + p); return _jscallog("No problem setting new matrix to instance " + this.id), this.fire("matrixSet"), this.state.matrixmonth = this.state.month, l && this.render(), this } }, { key: "debug", value: function () { var f = {}; for (var l in this.state.matrix[this.state.year][this.state.month]) { var n = this.state.matrix[this.state.year][this.state.month][l]; f[l] = n.map(function (o) { return { displayname: o.displayname, at: new Date(o.at), duration: o.duration } }) } return { year: this.state.year, month: this.state.month, day: this.state.day, weekday: this.state.weekday, view: this.state.view, monthMatrix: f } } }, { key: "fetch", value: function (f, l) { var n = this; if (!l && this.state.matrix[this.state.year] && this.state.matrix[this.state.year][this.state.month]) _jscallog("Loading matrix from local cache"), f && f(); else if (this.options.datasource) { var o = new XMLHttpRequest; for (var p in this.options.datasourceHeaders) o.setRequestHeader(p, this.options.datasourceHeaders[p]); var q = 86400000, r = a.getDaysInMonth(this.state.year, this.state.month), u = new Date(this.state.year, this.state.month, 1), x = new Date(this.state.year, this.state.month, r.numberOfDays), z = u.getTime() - u.getDay() * q, A = x.getTime() + (6 - x.getDay()) * q + q - 1, B = this.options.datasource; B += (-1 == B.indexOf("?") ? "?" : "&") + "year=" + this.state.year + "&month=" + this.state.month + "&day=" + this.state.day + "&view=" + this.state.view + "&startstamp=" + z + "&endstamp=" + A; var C = { url: B }; this.fire("willFetch", C), o.onreadystatechange = function () { if (o.readyState == XMLHttpRequest.DONE && 200 == o.status) try { var D = JSON.parse(o.responseText); n.fire("fetched", D), (n.options.fetchReplaces ? n.setMatrix(D) : n.appendMatrix(D)) ? (_jscallog("Updated matrix from data source"), f && f(void 0, D)) : (_jscallog("Received invalid matrix"), f && f(new Error("Invalid matrix size"), D)) } catch (E) { _jscallog("Caught error during matrix parsing : " + E), f && f(E) } else o.status && 200 != o.status && (_jscallog("Received non-200 HTTP response code : " + o.status), f && f(new Error("Non-200 HTTP response code : " + o.status), o.status)) }, _jscallog("Sending async request to data source : " + this.options.datasource), o.open("GET", C.url), o.send() } else _jscallog("Created new entry in matrix for " + this.state.year + "/" + this.state.month), this.state.matrix[this.state.year] || (this.state.matrix[this.state.year] = { 0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {} }), this.state.matrix[this.state.year][this.state.month] || (this.state.matrix[this.state.year][this.state.month] = {}), f && f(new Error("Invalid datasource")); return this } }], [{ key: "getDaysInMonth", value: function (f, l) { return { numberOfDays: [31, 0 == f % 4 && (0 != f % 100 || 0 == f % 400) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][l], firstDay: new Date(f, l).getDay() } } }, { key: "on", value: function (f, l) { a.hooks[f] = a.hooks[f] || [], a.hooks[f].push(l) } }, { key: "fire", value: function (f, l, n) { var o = a.hooks[f] || []; o.forEach(function (p) { p(l, n) }) } }, { key: "emptyElem", value: function (f) { if (f) for (; f.firstElementChild;)f.firstElementChild.remove() } }, { key: "defaultMatrix", value: function () { var f, l = new Date().getFullYear(); return f = {}, _defineProperty(f, l - 1, { 0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {} }), _defineProperty(f, l, { 0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {} }), _defineProperty(f, l + 1, { 0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {} }), f } }, { key: "createState", value: function () { var f = new Date; return { view: "month", matrix: a.defaultMatrix(), matrixmonth: f.getMonth(), year: f.getFullYear(), month: f.getMonth(), day: f.getDate(), weekday: f.getDay(), dragging: !1 } } }, { key: "getInstance", value: function (f) { return _jsCalWrapper.instances[f] } }, { key: "find", value: function (f) { for (var l = (f || document).querySelectorAll(a.defaultOptions.globalSelector), n = 0; n < l.length; n++) { var o = l[n], p = o.id || "js-calendar-" + n; _jsCalWrapper.instances[p] = new a(o).init() } return a } }, { key: "defaultOptions", get: function () { return { views: ["day", "week", "month"], viewsVocab: { day: "Day", week: "Week", month: "Month" }, buttons: ["previous", "today", "next"], buttonsActions: { previous: "goBack", today: "goNow", next: "goNext" }, buttonsVocab: { previous: "<", today: "Today", next: ">" }, monthsVocab: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], daysVocab: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], nthVocab: { 1: "st", 2: "nd", 3: "rd", default: "th" }, emptyDayVocab: "Nothing here.", noDate: "Somewhen", nonameEventVocab: "Event without a name", globalSelector: ".js-calendar", eventBackground: "rgb(126, 156, 193)", titleCropSize: 20, dayviewGapMinutes: 30, dayviewNoTimeGapSize: 2, dayviewGapHeight: 38, datasource: "", datasourceHeaders: {}, ampm: !0, displaySeconds: !1, alwaysFetch: !1, fetchReplaces: !1, height: 700, width: 1024 } } }]), a }(); JSCalendar.hooks = {}, exports.JSCalendar = JSCalendar, exports.JSCalendarEvent = JSCalendarEvent;